@model AutenticationModel

@{
    CommunityModel Comunidad = Html.GetComunidad();
    UserIdentityModel IdentidadActual = Html.GetIdentidadActual();
    string NombreProyectoEcosistema = Html.GetNombreProyectoEcosistema();
}

<form method="post" id="formPaginaRegistro">
    @if (IdentidadActual.IsGuestUser)
    {
        <div class="fieldset fieldset01" id="formularioRegistro">
            <fieldset class="mediumLabels">
                <legend>@Html.GetText("LOGIN", "CREARCUENTA") <span class="queCammposObligatorios">@Html.GetText("REGISTRO", "TODOSOBLIGATORIOS")</span></legend>
                <div class="fieldsetContent">
                    <input type="hidden" id="txtGruposRed" name="txtGruposRed" value="@Model.NetGroups"/>
                    <input type="hidden" id="txtTokenRed" name="txtTokenRed" value="@Model.NetToken"/>

                    <p>
                        <label for="txtNombre" id="lblNombre" class="datoObligatorio"><span>@Html.GetText("REGISTRO", "NOMBRESIN*")</span></label>
                        <input type="text" class="text medium" id="txtNombre" name="txtNombre" value="@Model.Name" />
                    </p>
                    <p>
                        <label for="txtApellidos" class="datoObligatorio" id="lblApellidos"><span>@Html.GetText("REGISTRO", "APELLIDOSSIN*")</span></label>
                        <input type="text" class="text medium" id="txtApellidos" name="txtApellidos" value="@Model.LastName" />
                    </p>
                    <p>
                        <label for="txtEmail" class="datoObligatorio" id="lblEmail"><span>@Html.GetText("REGISTRO", "EMAIL")</span></label>
                        <input type="text" class="text medium" id="txtEmail" name="txtEmail" value="@Model.Email" @((Model.TypePage == AutenticationModel.TypeAutenticationPage.RegistroConRedesSociales && !string.IsNullOrEmpty(Model.Email))?"disabled":"")/>
                    </p>
                    @if (Model.Errors != null && Model.Errors.Contains("emailrepetido"))
                    { 
                        <p id="divKoEmail"><div style="display: block;" class="ko"><p>@Html.GetText("AGREGARDATOSCONTACTOS", "EMAILEXISTENTE")</p></div></p>
                    }
                    @if (Model.TypePage != AutenticationModel.TypeAutenticationPage.RegistroConRedesSociales)
                    {
                    <p>
                        <label for="txtContrasenya" class="datoObligatorio" id="lblContrasenya"><span>@Html.GetText("REGISTRO", "CONTRASENYA")</span></label>
                        <input type="password" class="text medium" id="txtContrasenya" name="txtContrasenya" />
                        <em style="margin-left: 210px" class="help"><span>@Html.GetText("REGISTRO", "INFOPASSWORD")</span></em>
                    </p>
                    }
                    @if (Model.AskPosition)
                    {
                    <p>
                        <label for="txtCargo" class="datoObligatorio" id="lblCargo"><span>@Html.GetText("ACEPTARINVITACION", "CARGOORGANIZACION")</span></label>
                        <input type="text" class="text medium" id="txtCargo" name="txtCargo" />
                    </p>
                    }
                    @if (Es.Riam.Gnoss.Util.Seguridad.Usuario.UsuarioActual.EsUsuarioInvitado && !string.IsNullOrEmpty(UtilUsuario.TokenLoginUsuario) && IdentidadActual.NumberOfLoginAttemptsIP >= 2)
                    {
                        string srcCaptcha = Es.Riam.Gnoss.Util.General.Conexion.ObtenerUrlServicioLogin() + "/LoginCaptcha.aspx?token=" + HttpUtility.UrlEncode(Es.Riam.Web.Util.MachineKeyCryptography.Encriptar(UtilUsuario.TokenLoginUsuario));
                        
                        <p id="panCaptcha">
                            <label>
                                @Html.GetText("LOGIN", "TEXTOCAPTCHA")
                                <img id="imgCaptchaLogin" src="@srcCaptcha"/>
                            </label>
                            <input name="captcha" type="captcha" id="captchaLogin" class="text medium" onkeydown="if(event.which || event.keyCode){if ((event.which == 13) || (event.keyCode == 13)) {Entrar(); return false;}}" />
                        </p>
                    }
                    @if (Model.AskBornDate)
                    {
                        <p>
                            <label for="txtFechaNac" class="datoObligatorio" id="lblFechaNac"><span>@Html.GetText("REGISTRO", "FECHANACIMIENTOSIN*")</span></label>
                            @{
                                int diaFecha = 0;
                                int mesFecha = 0;
                                int anioFecha = 0;
                                if (!string.IsNullOrEmpty(Model.BornDate))
                                {
                                    string[] fecha = Model.BornDate.Split('/');

                                    diaFecha = int.Parse(fecha[0]);
                                    mesFecha = int.Parse(fecha[1]);
                                    anioFecha = int.Parse(fecha[2]);
                                }
                            }				
                            <select id="txtFechaNacDia" class="text small">
	                            <option value="0">Día</option>
                                @for (int dia = 1; dia <= 31; dia++)
                                { 
	                            <option value="@dia" @(dia==diaFecha?"selected":"")>@dia</option>
                                }
                            </select>
                            <select id="txtFechaNacMes" class="text small">
	                            <option value="0">Mes</option>
                                @for (int mes = 1; mes <= 12; mes++)
                                { 
	                            <option value="@mes" @(mes==mesFecha?"selected":"")>@mes</option>
                                }

                            </select>
                            <select id="txtFechaNacAnio" class="text small" >
	                            <option  value="0">Año</option>
                                @for (int anio = (DateTime.Now.Year - Model.MinAgeRegistre); anio >= (DateTime.Now.Year - 90); anio--)
                                { 
	                            <option value="@anio" @(anio==anioFecha?"selected":"")>@anio</option>
                                }
                            </select>
        
                            <input type="hidden" id="txtFechaNac" name="txtFechaNac" value="@Model.BornDate"/>
                        </p>
                    }
                    @if (Model.AskCountry)
                    {
                        <p>
                            <label for="ddlPais" class="datoObligatorio" id="lblPais"><span>@Html.GetText("REGISTRO", "PAISSIMPLE")</span></label>
                            <select id="ddlPais" class="text small dato" name="ddlPais">
                                <option value="@Guid.Empty">@Html.GetText("REGISTRO", "SINESPECIFICAR")</option>
                                @foreach (Guid idPais in Model.CountryList.Keys)
                                {
                                    <option value="@idPais" @(Model.CountryID != null && idPais.Equals(Model.CountryID) ? "selected" : "")>@Model.CountryList[idPais]</option>
                                }
                            </select>
                        </p>
                    }
                    @if (Model.AskRegion)
                    {
                        <p>
                            @{bool visibleSelect = false;}
                            <label for="txtProvincia" class="datoObligatorio" id="lblProvincia"><span>@Html.GetText("REGISTRO", "PROVINCIASIMPLE")</span></label>
                            @if (Model.CountryID != null && Model.CountryID != Guid.Empty && Model.CountryList[Model.CountryID].Equals("España"))
                            {
                                visibleSelect = true;
                            }
                            <select id="ddlProvincia" class="text small selectProvincia" name="ddlProvincia" @(visibleSelect ? "style=display:block" : "style=display:none")>
                                @foreach (Guid idRegion in Model.RegionList.Keys)
                                {
                                    <option @(Model.RegionID != null && Model.RegionID.Equals(idRegion) ? "selected" : "") value="@idRegion">@Model.RegionList[idRegion]</option>
                                }
                            </select>
                            <input type="text" class="text medium" id="txtProvincia" name="txtProvincia" @(visibleSelect ? "style=display:none" : "style=display:block") value="@(!string.IsNullOrEmpty(Model.Region) ? Model.Region : "")" />
                        </p>
                    }
                    @if (Model.AskLocation)
                    {
                        <p>
                            <label for="txtLocalidad" class="datoObligatorio" id="lblLocalidad"><span>@Html.GetText("REGISTRO", "POBLACIONSIMPLE")</span></label>
                            
                            <input type="text" class="text medium" id="txtLocalidad" name="txtLocalidad" value="@(!string.IsNullOrEmpty(Model.Location) ? Model.Location : "")" />
                        </p>
                    }
                    @if (Model.AskGender)
                    {
                        <p>
                            <label for="ddlSexo" class="datoObligatorio" id="lblSexo"><span>@Html.GetText("REGISTRO", "SEXO")</span></label>
                            <select id="ddlSexo" class="text small dato" name="ddlSexo">
	                            <option  value="0">@Html.GetText("REGISTRO", "SINESPECIFICAR")</option>
                                <option @(Model.Gender != null && Model.Gender.Equals("H") ? "selected" : "") value="H">@Html.GetText("REGISTRO", "HOMBRE")</option>
                                <option @(Model.Gender != null && Model.Gender.Equals("M") ? "selected" : "") value="M">@Html.GetText("REGISTRO", "MUJER")</option>
                            </select>
                        </p>
                    }

                    @if (Model.AdditionalFields != null && Model.AdditionalFields.Count > 0)
                    {
                        <div id="panCamposConfigurablesProyecto">
                            @foreach (AdditionalFieldAutentication campoExtra in Model.AdditionalFields)
                            {
                                <p>
                                    <label for="@campoExtra.FieldName" @(campoExtra.Required ? "class=datoObligatorio" : "")>@campoExtra.Title</label>
                                    @if (campoExtra.Options != null && campoExtra.Options.Count > 0)
                                    { 
                                        <select name="@campoExtra.FieldName" id="@campoExtra.FieldName" class="dato select medium @campoExtra.FieldName">
                                            <option value="@Guid.Empty">@Html.GetText("REGISTRO", "SINESPECIFICAR")</option>
                                            @foreach (Guid idCampo in campoExtra.Options.Keys)
                                            {
                                                <option @(campoExtra.FieldValue == idCampo.ToString() ? "selected" : "") value="@idCampo">@campoExtra.Options[idCampo]</option>
                                            }
                                        </select>
                                    }
                                    else
                                    {
                                        string claseInput = "text medium";
                                        if (campoExtra.AutoCompleted)
                                        {
                                            claseInput += " txtBusqueda autocompletar " + campoExtra.FieldValue;
                                        }
                                        <input type="text" class="@claseInput" id="@campoExtra.FieldName" name="@campoExtra.FieldName" value="@campoExtra.FieldValue" />
                                
                                        if (campoExtra.AutoCompleted)
                                        {
                                            string inputHack = campoExtra.FieldName + "hack";
                                            <input type="hidden" id="@inputHack" class="@inputHack" />
                                        }
                                    }
                                </p>
                            }
                        </div>
                    }

                    <div id="divKodatosUsuario"> 
                        @{
                    bool mastrarDivError = (Model.Errors != null && Model.Errors.Count > 0 && (Model.Errors.Contains("camposVacios") || Model.Errors.Contains("formatoNombre") || Model.Errors.Contains("formatoApellidos") || Model.Errors.Contains("formatoEmail") || Model.Errors.Contains("formatoPassword")));        
                        }

                        <div class="ko" style="@(mastrarDivError ? "display:block" : "")"> 
                            @if (Model.Errors != null && Model.Errors.Count > 0)
                            {
                                foreach (string error in Model.Errors)
                                {
                                    if (error == "camposVacios")
                                    {
                                        <p>@Html.GetText("REGISTRO", "ERRORCAMPOSVACIOS")</p>
                                    }
                                    if (error == "formatoNombre")
                                    {
                                        <p>@Html.GetText("REGISTRO", "ERRORFORMATONOMBRE")</p>
                                    }
                                    if (error == "formatoApellidos")
                                    {
                                        <p>@Html.GetText("REGISTRO", "ERRORFORMATOAPELLIDOS")</p>
                                    }
                                    if (error == "formatoEmail")
                                    {
                                        <p>@Html.GetText("REGISTRO", "ERRORFORMATOEMAIL")</p>
                                    }
                                    if (error == "formatoPassword")
                                    {
                                        <p>@Html.GetText("REGISTRO", "ERRORFORMATOPASS")</p>
                                    }
                                }
                            }
                        </div>
                    </div>
                </div>
            </fieldset>
        </div>
    }

    @if (!IdentidadActual.IsGuestUser && Html.GetSoloIdentidadPersonal().HasValue && !Html.GetSoloIdentidadPersonal().Value && Html.GetPerfilesAceptarinvitacion() != null && Html.GetPerfilesAceptarinvitacion().Count > 0)
    {
        <div id="panSelectorPerfiles" class="fieldset fieldset01">
            <fieldset class="mediumLabels">
                <p>
                    <label for="selectorPerfilAceptarInvitacion" id="lblSelectorPerfiles" class="datoObligatorio">@Html.GetText("REGISTRO", "SELECTORPERFILACEPTARINVITACION")</label>
                    <select id="selectorPerfilAceptarInvitacion">
                        @foreach (ProfileModel perfil in Html.GetPerfilesAceptarinvitacion())
                        {
                            <option value="@perfil.Key">@perfil.NamePerson</option>
                        }
                    </select>
                </p>
            </fieldset>
        </div>
    }

    <div class="fieldset fieldset02">
        <fieldset>
            <div class="fieldsetContent">
                <input type="hidden" id="clausulasSelecc" name="clausulasSelecc" />
                <ul class="radioList" id="condicionesUso">
                    @{
                        if (!Model.AskBornDate && IdentidadActual.IsGuestUser)
                        {
                            <li id="liClausulaMayorEdad">
                                <input id="cbMayorEdad" type="checkbox" name="cbMayorEdad" style="border: 0px; padding: 0px; margin-top: 0px;">
                                <span id="lblMayorEdad">@Html.GetText("REGISTRO", "SOYMAYOREDAD")</span>
                            </li>
                        }

                        foreach (Guid clausula in Model.Clauses.Keys)
                        {
                            string classCheck = "";
                            if (Model.Clauses[clausula].Value)
                            {
                                classCheck = "optional";
                            }
                            <li>
                                <input type="checkbox" class="@classCheck" id="@clausula" />
                                @{
                                    string textoClausula = Model.Clauses[clausula].Key;
                                    @*si es obligatoria y contiene una de las dos máscaras*@
                                if (!Model.Clauses[clausula].Value && (Model.Clauses[clausula].Key.Contains(ManageRegisterClausesViewModel.MascaraCondicionesUso) || Model.Clauses[clausula].Key.Contains(ManageRegisterClausesViewModel.MascaraPoliticaPrivacidad)))
                                {
                                    textoClausula = Html.GetText("COMADMINCLAUSULASREGISTRO", "HELEIDOYACEPTO");
                                    if (Model.Clauses[clausula].Key.Contains(ManageRegisterClausesViewModel.MascaraCondicionesUso))
                                    {
                                        string condicionesUso = Html.GetText("COMADMINCLAUSULASREGISTRO", "TEXTODEFECTOCCONDICIONESUSOCOM");
                                        string jsCondiciones = "<a onclick=\"MostrarPanelExtra();$('#condicionesUsoCom').parent().children().each(function(){ var div = $(this); div.hide(); });$('#condicionesUsoCom').show(); return false; \">" + condicionesUso + "</a>";

                                        textoClausula += jsCondiciones;
                                    }
                                    if (Model.Clauses[clausula].Key.Contains(ManageRegisterClausesViewModel.MascaraCondicionesUso) && Model.Clauses[clausula].Key.Contains(ManageRegisterClausesViewModel.MascaraPoliticaPrivacidad))
                                    {
                                        textoClausula += " " + Html.GetText("COMMON", "Y");
                                    }
                                    if (Model.Clauses[clausula].Key.Contains(ManageRegisterClausesViewModel.MascaraPoliticaPrivacidad))
                                    {
                                        string politicaPriv = Html.GetText("COMADMINCLAUSULASREGISTRO", "TEXTODEFECTOCPOLITICAPRIVACIDADCOM");
                                        string jsCondiciones = "<a onclick=\"MostrarPanelExtra();$('#clausulasTextoCom').parent().children().each(function(){ var div = $(this); div.hide(); });$('#clausulasTextoCom').show(); return false; \">" + politicaPriv + "</a>";

                                        textoClausula += jsCondiciones;
                                    }
                                    textoClausula += " " + Html.GetText("COMMON", "DE") + " " + Comunidad.ShortName;
                                }
                                    <span class="clauAdicional">@MvcHtmlString.Create(textoClausula)</span>
                                }
                            </li>
                        }
                    }
                </ul>
            </div>
            <div style="display: none;" id="despleReg">
                <div style="display: block;" class="stateShowForm" id="panels">
                    <div class="box form activeForm" id="action">
                        @foreach (string condicion in Model.Terms.Keys)
                        {
                            <div id="@condicion">
                                <div>
                                    <fieldset>
                                        <legend><span>@Model.Terms[condicion].Key</span></legend>
                                        @MvcHtmlString.Create(Model.Terms[condicion].Value)
                                    </fieldset>
                                </div>
                            </div>
                        }
                    </div>
                    <p class="cerrar">
                        <a onclick="CerrarPanelAccion('despleReg')" title="@Html.GetText("CONTROLDESPLEGAR", "CERRARFORM")">@Html.GetText("CONTROLDESPLEGAR", "CERRARX")</a>
                    </p>
                </div>
            </div>
            <div id="divKoCondicionesUso">
                <div class="ko">
                </div>
            </div>
        </fieldset>
    </div>

    @if (IdentidadActual.IsGuestUser && !string.IsNullOrEmpty(Model.ImageCaptcha))
    {
        <p>
            <span>@Html.GetText("REGISTRO", "NOBOT")</span>
            <img src="@Model.ImageCaptcha"/>
            <input type="text" name="captcha" />
        </p>
        if (Model.Errors != null && (Model.Errors.Contains("errorCaptcha") || Model.Errors.Contains("errorCaptchaNumIntentos")))
        {
        <div class="ko">
            @if (Model.Errors.Contains("errorCaptcha"))
            {
                <p>@Html.GetText("REGISTRO", "ERRORCAPTCHA")</p>
            }
            @if (Model.Errors.Contains("errorCaptchaNumIntentos"))
            {
                <p>@Html.GetText("REGISTRO", "ERRORCAPTCHANUMINTENTOS")</p>
            }
        </div>
        }
    }
    <div class="fieldset actionButtons fieldset03 actionButtons">
        <fieldset>
            <p>
                @{
                    string funcionRegistrar = "";

                    if (IdentidadActual.IsGuestUser)
                    {
                        funcionRegistrar = "if(ComprobarDatosRegistro('" + Model.MinAgeRegistre + "')) {return false;}";
                    }
                    else
                    {
                        funcionRegistrar = "if(ComprobarDatosRegistroLogeado()) {return false;}";
                    }
                }
                <input type="hidden" value="@Html.GetUrlOrigen()" name="urlOrigen" />
                <input type="hidden" value="@Model.SecurityID" name="txtSeguridad" />

                @if (!IdentidadActual.IsGuestUser && Html.GetSoloIdentidadPersonal().HasValue && !Html.GetSoloIdentidadPersonal().Value && Html.GetPerfilesAceptarinvitacion() != null && Html.GetPerfilesAceptarinvitacion().Count > 0)
                {
                    <a class="principal submit activo" name="SelectorPerfilInvitacion" onclick="$(this).next().val($('#selectorPerfilAceptarInvitacion option:selected').val());$(this).next().click()"><span>@Html.GetText("REGISTRO", "BOTONACEPTARINVITACIONPERFIL")</span></a>
                    <input class="activo" type="submit" name="SelectorPerfilInvitacion" value="" style="display: none;" />
                }
                else
                {
                    string textoBoton = Html.GetText("REGISTRO", "REGISTRARSE").ToUpper();
                    if (Model.InvitationRegistre)
                    {
                        textoBoton = Html.Translate("Aceptar invitacion").ToUpper();
                    }
                    else if (!IdentidadActual.IsGuestUser)
                    {
                        textoBoton = Html.GetText("COMUNIDADES", "HAZTEMIEMBRO").ToUpper();
                    }
                    
                    <input type="submit" value="@textoBoton" class="principal submit" id="btnCrearCuenta" onclick="@funcionRegistrar"/>
                }

                @if (IdentidadActual.IsGuestUser)
                {
                    <a onclick="CargarFormLoginRegistro('@Html.GetUrlPagina()')">@Html.GetText("REGISTRO", "YAERESUSUARIOGNOSS", NombreProyectoEcosistema)</a>
                }
            </p>
        </fieldset>
    </div>

    @if (IdentidadActual.IsGuestUser)
    {
        <script type="text/javascript">
            $(document).ready(function () {
                $("#txtFechaNac").datepicker({
                    changeMonth: true,
                    changeYear: true,
                    yearRange: "@(DateTime.Now.Year - 90):@(DateTime.Now.Year - Model.MinAgeRegistre)",
                    maxDate: "@DateTime.Today.AddYears(-Model.MinAgeRegistre).ToString("dd/MM/yyyy")"
                });
                $('#txtNombre').focus();
                $('#txtNombre').blur(function () {
                    ComprobarCampoRegistroMVC('Nombre');
                });
                $('#txtNombre').keydown(function (event) {
                    if (event.which || event.keyCode) { if ((event.which == 13) || (event.keyCode == 13)) { return false; } }
                });
                $('#txtApellidos').blur(function () {
                    ComprobarCampoRegistroMVC('Apellidos');
                });
                $('#txtApellidos').keydown(function (event) {
                    if (event.which || event.keyCode) { if ((event.which == 13) || (event.keyCode == 13)) { return false; } }
                });
                $('#txtCargo').keydown(function (event) {
                    if (event.which || event.keyCode) { if ((event.which == 13) || (event.keyCode == 13)) { return false; } }
                });
                $('#txtCargo').blur(function () {
                    ValidarCampoNoVacio('txtCargo', 'lblCargo');
                });
                $('#txtEmail').blur(function () {
                    // TODO Alberto: Gnapa temporal para Inevery Crea 
                    var MensajePersonalizado = '@Html.GetText("REGISTRO", "EMAILREPE", NombreProyectoEcosistema, Html.GetText("URLSEM", "OLVIDEPASSWORD") + "/' + $('#' + paginaID + '_txtCorreoE').val() + '")';
                    ComprobarEmailUsuario('@Html.GetUrlPagina()');
                });
                $('#txtEmail').keydown(function (event) {
                    if (event.which || event.keyCode) { if ((event.which == 13) || (event.keyCode == 13)) { return false; } }
                });
                $('#txtContrasenya').blur(function () {
                    ComprobarCampoRegistroMVC('Contra1');
                });
                $('#txtContrasenya').keydown(function (event) {
                    if (event.which || event.keyCode) { if ((event.which == 13) || (event.keyCode == 13)) { return false; } }
                });
                $('#captcha').keydown(function (event) {
                    if (event.which || event.keyCode) { if ((event.which == 13) || (event.keyCode == 13)) { return false; } }
                });
                $('#ddlPais').change(function () {
                    if ($('#ddlPais option:selected')[0].text == 'España') {
                        $('.selectProvincia').show().addClass('inlineBlockProv');
                        $('#txtProvincia').hide().removeClass('inlineBlockProv');
                    }
                    else {
                        $('.selectProvincia').hide().removeClass('inlineBlockProv');
                        $('#txtProvincia').show().addClass('inlineBlockProv');
                    }
                });
                @Html.PartialView("ControlesMVC/_AutoCompletarCampoExtra", Model.AdditionalFields);
            });

            function RecogerDatosExtra() {
                var error = '';

                $('#txtFechaNac').val($('#txtFechaNacDia').val() + '/' + $('#txtFechaNacMes').val() + '/' + $('#txtFechaNacAnio').val());

                $('#panCamposConfigurablesProyecto label[title=\'campo obligatorio\']').each(function () {
                    var label = $(this);
                    var campo = $(this).next();
                    if (campo.is('select')) {
                        error += AgregarErrorReg(error, ValidarCampoSelectObligatorio(campo, label));
                    }
                    else {
                        error += AgregarErrorReg(error, ValidarCampoObligatorio(campo, label));
                    }
                });
                return error;
            }
        </script>
    }
</form>
