@model CommentModel

@{
    UserIdentityModel IdentidadActual = Html.GetIdentidadActual();    
}
<div rel="sioc:has_discussion" class="comentario-recurso" id="@Model.Key">@*comment*@
	<div resource="@Html.GetUrlPagina()/comentario/@Model.Key" typeof="sioc_t:Comment" class="comentario-recurso" >
        <div class="header-comentario">
            <div class="publicador" rel="sioc:has_creator" about="@Html.GetUrlPagina()/comentario/@Model.Key">
                @{
                    string nombrePublicador = Html.ObtenerNombrePerfil(Model.PublisherCard);
                    string urlPublicador = Html.ObtenerUrlPerfil(Model.PublisherCard);
                    string nombrePub = Model.PublisherCard.NamePerson;
                    string empresa = Model.PublisherCard.NameOrganization;
                    string classAnonimo = "";
                    string urlFoto = null;
                    if (Model.PublisherCard.UrlFoto == null)
                    {
                        if (Model.PublisherCard.TypeProfile == ProfileType.Personal || Model.PublisherCard.TypeProfile == ProfileType.Teacher || Model.PublisherCard.TypeProfile == ProfileType.ProfessionalPersonal)
                        {
                            classAnonimo = "personaSinImagen";
                        }
                        else
                        {
                            classAnonimo = "organizacionSinImagen";
                        }
                    }else
                    {
                        urlFoto = Html.GetBaseUrlContent() + Model.PublisherCard.UrlFoto;
                    }
                }
                <a href="@urlPublicador" class="userComment @classAnonimo">
                    @if (string.IsNullOrEmpty(classAnonimo))
                    {
                        @*<img src="@Html.GetBaseUrlContent()@Model.PublisherCard.UrlFoto" alt="@nombrePublicador" />*@
                    }
                </a>
                <span class="imagen" @Html.Raw(string.IsNullOrEmpty(urlFoto) ? "" : "style=\"background: url(" + urlFoto + ") no-repeat center\"")></span>
                <span class="datos">
                    <a typeof="foaf:Person" href="@urlPublicador" class="usuario">
                        @nombrePub
                    </a>
                    <span class="comunidad">@empresa</span>
                    @*<span class="by"> @Html.GetText("CONTROLESDOCUMENTACION", "HADICHO")</span>*@
                </span>
            </div>

            <div class="fecha" content="@Es.Riam.Gnoss.ExportarImportar.UtilImportarExportar.PasarFechaEnFormatoEstandar(Model.PublishDate)" property="dcterms:created">
                <p> @Model.PublishDate.ToString("yyyy/MM/dd HH:mm")</p>
            </div>
            <div class="mas-opciones">
                <span class="toggle">
                </span>
                <div class="opciones">
                    <span class="cerrar"></span>
                    @if (Model.Actions != null && !IdentidadActual.IsGuestIdentity)
                    {
                            <ul>
                                @if (Model.Actions.Delete)
                                {
                                    string funcionComentario_EliminarComentario = "Comentario_EliminarComentario('" + Model.Actions.UrlDelete + "', '" + Model.Key + "');";
                                    <li class="opLabel">
                                        <a style="cursor:pointer;" onclick="@funcionComentario_EliminarComentario">@Html.GetText("CONTROLESDOCUMENTACION", "ELIMINAR")</a>
                                    </li>
                                }
                                @if (Model.Actions.Edit)
                                {
                                    string funcionComentario_EditarComentario = "Comentario_EditarComentario('" + Model.Actions.UrlEdit + "', '" + Model.Key + "');";
                                    <li class="opLabel">
                                        <a style="cursor:pointer;" onclick="@funcionComentario_EditarComentario">@Html.GetText("CONTROLESDOCUMENTACION", "EDITAR")</a>
                                    </li>
                                }
                                @if (Model.Actions.Reply)
                                {
                                    string funcionComentario_ResponderComentario = "Comentario_ResponderComentario('" + Model.Actions.UrlReply + "', '" + Model.Key + "');";
                                    <li class="opLabel">
                                        <a style="cursor:pointer;" onclick="@funcionComentario_ResponderComentario">@Html.GetText("CONTROLESDOCUMENTACION", "RESPONDER")</a>
                                    </li>
                                }
                            </ul>
                    }
                </div>
            </div>
        </div>
        @*@if (!IdentidadActual.IsGuestIdentity)
        {
            <div class="group utils-1">
                @if(Model.Votes != null)
                {
			    <p class="votos">
                    <span class="literal">Valoración</span>
                    <strong  id="numVotos">@Model.Votes.NumVotes</strong>

                    @if (Model.Votes.IsVotedPositive)
                    {
                        if (Model.Votes.AllowNegativeVotes)
                        {
                            <a class="megusta eleccionUsuario iconizer"><span class="icono"></span>@Html.GetText("PERFILBASERECURSOSFICHA", "MEGUSTA")</a>
                        }
                        else
                        {
                            <text>@Html.GetText("PERFILBASERECURSOSFICHA", "TEGUSTA")</text>
                        }
                    }
                    else
                    {
                        <a onclick="Comentario_VotarPositivo(this, '@Model.Actions.UrlVotePositive', '@Model.Key')" class="megusta iconizer"><span class="icono"></span>@Html.GetText("PERFILBASERECURSOSFICHA", "MEGUSTA")</a>
                    }
        
                    @if (Model.Votes.AllowNegativeVotes)
                    {
                        if (Model.Votes.IsVotedNegative)
                        {
                            <a class="nomegusta eleccionUsuario iconizer"><span class="icono"></span>@Html.GetText("PERFILBASERECURSOSFICHA", "NOMEGUSTA")</a>
                        }
                        else
                        {
                            <a onclick="Comentario_VotarNegativo(this, '@Model.Actions.UrlVoteNegative', '@Model.Key')" class="nomegusta iconizer"><span class="icono"></span>@Html.GetText("PERFILBASERECURSOSFICHA", "NOMEGUSTA")</a>
                        }
                    }
			    </p>
                }
		    </div>
        }*@
        <div class="body-comentario comment-content" property="sioc:content">
			@MvcHtmlString.Create(Model.Title)
		</div>
        @if (Model.Replies.Count > 0)
        { 
            <div id="respuesta" style="padding-left:40px">
                @foreach (CommentModel comentarioHijo in Model.Replies)
                { 
                     @Html.PartialView("_FichaComentario", comentarioHijo)
                }
            </div>
        }
	</div>
</div>